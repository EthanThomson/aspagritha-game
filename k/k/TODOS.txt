grid system:
description: choose between 2d or 3d both of which have problems

different units can take up 1 or more grid squares


fuck server meshing we using GPUs for this my homey


GIGABRAIN IDEA: instead of storing the units oj the grid the grid is solely used to as a pointermap to lookup units when maths happens on the grid


pseudo: 

from the start of a effect: exp a marine(0,0) shoots at a enemy(0,10) the marine creates a line along these points with a width of 1 cell this line also has attached to it the intended unit it wants to affect, using some crazy algebra come up with a equation that'll return only any units along the line along with a two chars (only needs to be a byte) these chars(cover, distance) are added to the hitCalculaton equation as weights.

if only the enemy is returned then good just roll for hit and effects, but if some other unit is returned along with the target the roll equation will be effected by a weight from the intent flag of the line. if thr units returned are of 

R = \max(\{k \cdot w_i \mid k \cdot w_i > Q \} \cup \{ \max(W) \})







use opencl for the maths side of the game



the movement grid system can work by simply doing the matrix tranformation equation passed to to gpu using opencl
https://stackoverflow.com/questions/19985690/how-do-i-implement-a-2d-transformation-matrix 
do this for every unit in parrellel each movement phase of the rising clock reset





I may need server meshing for this
Server meshing:
assign each server instance its own grid area
then one or more servers run the replication layer
grid areas can be assigned dynamically based off units in the area

fuck server meshing im doing gpu programming for this shit
opencl for now


Graphics:
all graphics will be handled though a very advanced system of fonts
this is the fastest version of 2d graphics i can currently think of

group intelligence:
each unit running itself would be a computational nightmare
instead some kind of group intelligence is needed

multi threading:
description: due to upwards of 100 septillion units in use at a single battle this game will need to a
crazy polling system and as that number is well over the unsigned 64 bit int limit
a custom data type will be needed
research:
128 bit would work for the address datatype
96 bytes
2^88

tech & research:
status effects:
body(armour, vehicle, actual body, etc):
shredded, mangled, destroyed, circuitry issue, coated(fallout, flammables, stranglet, toxins, ), stranglet disintegration, disintegration, corroded, 

self(Human body):
bleed, radiated, detached neural port, oxygen deprived, sleep deprived, 

omni(both armour and self):
fire(staged effect; minimal temp, low temp, med temp, high temp, inferno, conflagration), eradicated

effects can have multiple starters onhit, ondeath, onsecondarychance, ondamage, oncoords


uml:
description:

@startuml

class Grid
class Unit
class weapon
class armour
class equipable
class scriptedItem
class miscellaneous
class ammo
abstract class item
abstract class container
class storeage
class manipulator
class poller
class thread

item <|-- container
container <|-- manipulator
container <|-- storeage
Grid *-- Unit
item <|-- weapon
item <|-- armour
item <|-- equipable
Unit *-- item
item <|-- scriptedItem
item <|-- miscellaneous
item <|-- ammo


Unit : item[] inventory
Unit : item[] equipped
item : String name
item : int category
scriptedItem : effect()
weapon : int damage
weapon : int damageType
weapon : int range
weapon : int type
weapon : Use()
weapon : ammo[] accepted ammo
Unit : move()
Unit : refill()
Unit : equip()

@enduml



