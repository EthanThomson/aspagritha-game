grid system:
description: choose between 2d or 3d both of which have problems

different units can take up 1 or more grid squares

I may need server meshing for this
Server meshing:
assign each server instance its own grid area
then one or more servers run the replication layer
grid areas can be assigned dynamically based off units in the area

Graphics:
all graphics will be handled though a very advanced system of fonts
this is the fastest version of 2d graphics i can currently think of



group intelligence:
each unit running itself would be a computational nightmare
instead some kind of group intelligence is needed


multi threading:
description: due to upwards of 100 septillion units in use at a single battle this game will need to a
crazy polling system and as that number is well over the unsigned 64 bit int limit
a custom data type will be needed
research:
128 bit would work for the address datatype
96 bytes
2^88


tech & research:


status effects:
armour:
shredded, mangled, destroyed, circuitry issue, coated(fallout, flammables, ), stranglet disintegration, disintegration

self(Human body):
bleed, radiated, detached neural port, oxygen deprived

omni(both armour and self):
fire(staged effect; minimal temp, low temp, med temp, high temp, inferno, conflagration), eradicated




uml:
description:

@startuml

class Grid
class Unit
class weapon
class armour
class equipable
class scriptedItem
class miscellaneous
class ammo
abstract class item
abstract class container
class storeage
class manipulator
class poller
class thread

item <|-- container
container <|-- manipulator
container <|-- storeage
Grid *-- Unit
item <|-- weapon
item <|-- armour
item <|-- equipable
Unit *-- item
item <|-- scriptedItem
item <|-- miscellaneous
item <|-- ammo


Unit : item[] inventory
Unit : item[] equipped
item : String name
item : int category
scriptedItem : effect()
weapon : int damage
weapon : int damageType
weapon : int range
weapon : int type
weapon : Use()
weapon : ammo[] accepted ammo
Unit : move()
Unit : refill()
Unit : equip()

@enduml



